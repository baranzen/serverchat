WebSocket vs HTTP ve Gateway vs Controller Notları:

1. HTTP vs WebSocket:
- HTTP: Request-Response modelini kullanır. İstemci bir istek gönderir, sunucu yanıt verir ve bağlantı kapanır.
- WebSocket: Sürekli açık bir bağlantı (persistent connection) sağlar. İki yönlü iletişim (full-duplex) mümkündür.

2. Controller vs Gateway:
- Controller: HTTP endpoint'lerini karşılar (@Get(), @Post() gibi dekoratörler kullanır)
- Gateway: WebSocket event'lerini dinler (@SubscribeMessage() dekoratörü kullanır)

3. Gateway Örnek Kullanım:
@WebSocketGateway()
export class MessagesGateway {
  @SubscribeMessage('createMessage')
  create(@MessageBody() createMessageDto: CreateMessageDto) {
    return this.messagesService.create(createMessageDto);
  }
}

4. Controller Örnek Kullanım:
@Controller('messages')
export class MessagesController {
  @Post()
  create(@Body() createMessageDto: CreateMessageDto) {
    return this.messagesService.create(createMessageDto);
  }
}

5. Gateway'in Özel Metodları:
- handleConnection(): Yeni bir client bağlandığında
- handleDisconnect(): Client bağlantısı koptuğunda 
- afterInit(): Gateway başlatıldığında

6. Gateway Kullanım Alanları:
- Chat uygulamaları
- Real-time bildirimler
- Canlı veri güncellemeleri
- Online oyunlar

Not: Gateway'ler Socket.IO gibi WebSocket kütüphaneleriyle entegre çalışabilir.
